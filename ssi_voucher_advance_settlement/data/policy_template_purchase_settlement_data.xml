<?xml version="1.0" encoding="utf-8" ?>
<!-- Copyright 2022 OpenSynergy Indonesia
     Copyright 2022 PT. Simetri Sinergi Indonesia
     License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl-3.0-standalone.html). -->
<odoo>
<data noupdate="0">
<record id="policy_template_purchase_settlement" model="policy.template">
    <field name="name">Standard: Purchase Advance Settlement</field>
    <field
                name="model_id"
                ref="ssi_voucher_advance_settlement.model_account_purchase_advance_settlement"
            />
    <field
                name="state_field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','state')]"
            />
    <field name="sequence" eval="100" />
    <field name="python_code">result=True</field>
</record>

<record id="policy_template_purchase_settlement_confirm" model="policy.template_detail">
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','confirm_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','=','draft')]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_confirm_group_ids.ids
else:
    result = False
    </field>
</record>

<record
            id="policy_template_purchase_settlement_restart_approval"
            model="policy.template_detail"
        >
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','restart_approval_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','=','confirm')]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_restart_approval_group_ids.ids
else:
    result = False
    </field>
</record>

<record
            id="policy_template_purchase_settlement_proforma"
            model="policy.template_detail"
        >
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','proforma_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','=','open')]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_proforma_group_ids.ids
else:
    result = False
    </field>
</record>

<record id="policy_template_purchase_settlement_post" model="policy.template_detail">
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','post_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','in',['proforma','open'])]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_post_group_ids.ids
else:
    result = False
    </field>
</record>

<record id="policy_template_purchase_settlement_cancel" model="policy.template_detail">
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','cancel_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','in',['draft','post','proforma','open','confirm','done'])]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_cancel_group_ids.ids
else:
    result = False
    </field>
</record>

<record id="policy_template_purchase_settlement_restart" model="policy.template_detail">
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','restart_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','in',['cancel','reject'])]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_restart_group_ids.ids
else:
    result = False
    </field>
</record>

<record id="policy_template_purchase_settlement_reject" model="policy.template_detail">
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','reject_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','=','confirm')]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_reject_group_ids.ids
else:
    result = False
    </field>
</record>

<record id="policy_template_purchase_settlement_approve" model="policy.template_detail">
    <field name="template_id" ref="policy_template_purchase_settlement" />
    <field
                name="field_id"
                search="[('model_id.model','=','account.purchase_advance_settlement'),('name','=','approve_ok')]"
            />
    <field name="restrict_state" eval="1" />
    <field
                name="state_ids"
                search="[('field_id.model_id.model','=','account.purchase_advance_settlement'),('value','=','confirm')]"
            />
    <field name="restrict_user" eval="0" />
    <field name="restrict_additional" eval="1" />
    <field name="additional_python_code">obj_voucher_type_allowed_journal =\
    env["account.voucher_type_allowed_journal"]
criteria = [
    ("voucher_type_id", "=", document.type_id.id),
    ("journal_id", "=", document.journal_id.id)
]
allowed_wokflow_policy =\
    obj_voucher_type_allowed_journal.search(criteria)
if allowed_wokflow_policy:
    result = allowed_wokflow_policy.allowed_approve_group_ids.ids
else:
    result = False
    </field>
</record>

</data>
</odoo>
